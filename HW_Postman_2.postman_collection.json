{
	"info": {
		"_postman_id": "fe179d03-539a-4cfa-b178-6037ca10eca1",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//  Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Your test name\", function () {\r",
							"    \r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"//1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name = jsonData.name\r",
							"\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(name).to.eql(\"Kirill\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age = jsonData.age\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(age).to.eql(\"28\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"let salary = jsonData.salary\r",
							"\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							" let req = request.data\r",
							"\r",
							" // 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" let req_name = req.name\r",
							" console.log(req_name)\r",
							"\r",
							"pm.test(\"Check_name_req\", function () {\r",
							"    pm.expect(name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age\r",
							"console.log(req_age)\r",
							"\r",
							"pm.test(\"Check_age_req\", function () {\r",
							"    pm.expect(age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							" let req_salary = Number(req.salary)\r",
							" console.log(req_salary)\r",
							"\r",
							" pm.test(\"Check_salary_req\", function () {\r",
							"    pm.expect(salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let req_u_salary_1_5_year = req.salary * 4\r",
							"let salary_1_5_check = jsonData.family.u_salary_1_5_year\r",
							"console.log(salary_1_5_check)\r",
							"\r",
							" pm.test(\"Check_u_salary_1_5_year\", function () {\r",
							"    pm.expect(salary_1_5_check).to.eql(req_u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kirill",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    let name = jsonData.name\r",
							"    let age = jsonData.age\r",
							"    let salary = jsonData.salary\r",
							"    let family = jsonData.family\r",
							"\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"    let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"    let req_name = req.name\r",
							"    console.log(req)\r",
							"\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"    let req_age = req.age\r",
							"    console.log(req_age)\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"    let req_salary = +req.salary\r",
							"    console.log(req_salary)\r",
							"\r",
							" pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"name_has_dog\", function(){       // поиск проперти(ключ)\r",
							"\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"\r",
							"})\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"age_has_dog\", function(){       // поиск проперти(ключ)\r",
							"\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"\r",
							"})\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"\r",
							"pm.test(\"name_dog\", function(){       // поиск проперти(ключ)\r",
							"\r",
							"pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"\r",
							"})\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"age_dog\", function(){       // поиск проперти(ключ)\r",
							"\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kirill",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "28",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=Kirill&age=28&salary=2000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kirill"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    let name = jsonData.name\r",
							"    let age = jsonData.age\r",
							"    let salary = jsonData.salary\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"    let req = pm.request.url.query.toObject()\r",
							"    let req_name = req.name\r",
							"    let req_age = +req.age\r",
							"    let req_salary = +req.salary\r",
							"    let req_salary_0 = req.salary[0]\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(req_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(req_salary);\r",
							"});\r",
							"console.log(req_salary_0)\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check_salary_1\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(String(req_salary*2));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check_salary_2\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(String(req_salary*3));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Kirill\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"28\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"2000\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (i = 0; i < jsonData.salary.length; i++){\r",
							"console.log(\"salary_cycle\", jsonData.salary[i])}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5005/object_info_4?name=Kirill&age=28&salary=2000",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kirill"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"    let jsonData = pm.response.json();\r",
							"    let start_qa_salary = jsonData.start_qa_salary\r",
							"    let u_name = jsonData.person.u_name[0]\r",
							"    let age = jsonData.person.u_age\r",
							"\r",
							"\r",
							"// 7. Спарсить request.\r",
							"    let req = request.data\r",
							"    let req_salary = +req.salary\r",
							"    let req_name = req.name\r",
							"    let req_age = +req.age\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person_1\", function () {\r",
							"    pm.expect(u_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(age).to.eql(req_age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (key in jsonData.person){\r",
							"    console.log(\"Property:\", key, \"value:\", jsonData.person[key]);}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}